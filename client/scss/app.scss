@import '~bootstrap/scss/bootstrap.scss'; // sass/css filepaths must be relative to entry file, can't use 'url(..)'
@import './panel.scss';
@import './layout.scss';
@import './button.scss';

@import '../../node_modules/codemirror/lib/codemirror.css';

.app-view {
  /*
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-areas:
    "header header"
    "body body"
    "footer footer";
  */
  margin-top: 1em;
  margin-bottom: 1em;
  // align-items: center;
  // justify-content: center;
}

.panel-views {
  // display: flex !important;
  // vertical-align: middle;
  // align-items: center;
  // justify-content: center;
  // .row { input.submit-btn {} }
}

h1 {
  /* grid-area: header; */
  align-items: center;
  align-content: center;
  text-align: center;
  margin-bottom: 2rem;
  color: #205fab;
  padding-left: 0px !important;
  padding-right: 0px !important;
}

.column_1.col {
  display: inline-block;
  padding-left: 0px;
}

.column_2.col {
  // display: inline-flex;
  // justify-content: center;
  // align-items: center;
  .row > input.submit-btn {
    // width: 50%;
    // display: inline-flex;
    max-width: 200px;
    // vertical-align: middle;
  }
}

.column_3.col {
  // display: block;
  padding-right: 0px;
  div.row {
    // display: inline-block;
  }
  // align-items: center;
}



// div.col div.controls #code-input {
//   padding-left: 0px !important;
// }

.ace-tm {
  background-color: rgba(#205fab, 0.1) !important;
}

/*
  CSS 101:
  
  (block, inline, inline-block do not require parent container elements
  they can be applied directly to the element implementing the rule)

  display: block;
  - elements take up their own line and take 100% of width, cannot adjust manually
  - elements cannot end up side by side ever

  display: inline;
  - elements all fall onto the same line in the container
  - cannot apply width or height rules to any of the elements
  - elements do not wrap and instead get jammed up
  - cannot apply transforms on inline elements

  display: inline-block; // most common before flex and grid
  - elements fall onto same line
  - can apply width and height rules


  flex and grid require parent container elements
  parent element applies "display" tag to its child elements, not recursively
  
  display: flex;
  - container element still behaves block style, stretches 100% width of viewport
  - child elements fall side by side
  - (i.e. "flex" pseudo for "block-flex")

  display: inline-flex;
  - container element only stretches width to its child elements, no further

  Rules:

  vertical-align - only applies to display: block elements
  align-items - y-direction, only applies to display: flex elements
  justify-content - x-direction
*/